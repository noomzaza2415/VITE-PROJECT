/* eslint-disable @typescript-eslint/no-explicit-any */
// UserFormModal.tsx

import {
  Modal,
  Form,
  Input,
  Select,
  DatePicker,
  Upload,
  Button,
  message,
} from "antd";
import { UploadOutlined } from "@ant-design/icons";
import moment from "moment";
import { useEffect } from "react";
import type { UserType } from "../../types/UserType";

const { Option } = Select;

interface Props {
  visible: boolean;
  onCancel: () => void;
  onSubmit: (values: any) => void;
  editingUser: UserType | null;
  loading: boolean;
}

const UserFormModal: React.FC<Props> = ({
  visible,
  onCancel,
  onSubmit,
  editingUser,
  loading,
}) => {
  const [form] = Form.useForm();

  useEffect(() => {
    if (!visible) return;
    if (editingUser) {
      form.setFieldsValue({
        ...editingUser,
        birthday: editingUser.birthday ? moment(editingUser.birthday) : null,
        photo: editingUser.photoUrl
          ? [
              {
                uid: "-1",
                name: "image.png",
                status: "done",
                url: editingUser.photoUrl,
              },
            ]
          : [],
      });
    } else {
      form.resetFields();
    }
  }, [editingUser, visible, form]);

  const normFile = (e: any) => {
    if (Array.isArray(e)) return e;
    return e?.fileList || [];
  };

  const handleUpload = async (file: File): Promise<string | null> => {
    const formData = new FormData();
    formData.append("photo", file);

    try {
      const res = await fetch("http://localhost:3001/users/upload", {
        method: "POST",
        body: formData,
      });

      const data = await res.json();

      if (data?.url) {
        message.success("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        return data.url;
      } else {
        message.error("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        return null;
      }
    } catch (error) {
      console.error("Upload error:", error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ");
      return null;
    }
  };

  const handleFinish = async (values: any) => {
    let photoUrl = null;

    if (values.photo?.length > 0) {
      const file = values.photo[0];
      if (file.originFileObj) {
        photoUrl = await handleUpload(file.originFileObj); // üëà ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏¢‡∏Å
        if (!photoUrl) return;
      } else if (file.url) {
        photoUrl = file.url;
      }
    }

    const birthday = values.birthday
      ? values.birthday.format("YYYY-MM-DD")
      : null;

    onSubmit({
      ...values,
      birthday,
      photo: photoUrl, // üëà ‡πÅ‡∏Ñ‡πà URL ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå
      id: editingUser?.id,
    });
  };

  return (
    <Modal
      open={visible}
      onCancel={onCancel}
      onOk={() => form.submit()}
      confirmLoading={loading}
      title={editingUser ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
      destroyOnHidden
    >
      <Form
        key={editingUser?.id || "new"}
        form={form}
        layout="vertical"
        onFinish={handleFinish}
      >
        <Form.Item
          name="fullName"
          label="‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
          rules={[{ required: true }]}
        >
          <Input autoComplete="off" />
        </Form.Item>
        <Form.Item
          name="studentId"
          label="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
          rules={[{ required: true }]}
        >
          <Input autoComplete="off" />
        </Form.Item>

        <Form.Item name="grade" label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô" rules={[{ required: true }]}>
          <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å">
            <Option value="‡∏õ‡∏ß‡∏ä.1">‡∏õ‡∏ß‡∏ä.1</Option>
            <Option value="‡∏õ‡∏ß‡∏ä.2">‡∏õ‡∏ß‡∏ä.2</Option>
            <Option value="‡∏õ‡∏ß‡∏ä.3">‡∏õ‡∏ß‡∏ä.3</Option>
            <Option value="‡∏õ‡∏ß‡∏™.1">‡∏õ‡∏ß‡∏™.1</Option>
            <Option value="‡∏õ‡∏ß‡∏™.2">‡∏õ‡∏ß‡∏™.2</Option>
          </Select>
        </Form.Item>

        <Form.Item name="department" label="‡πÅ‡∏ú‡∏ô‡∏Å" rules={[{ required: true }]}>
          <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å">
            <Option value="‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•">
              ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•
            </Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•">‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•</Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á‡∏Å‡∏•‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï">
              ‡∏ä‡πà‡∏≤‡∏á‡∏Å‡∏•‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
            </Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°">
              ‡∏ä‡πà‡∏≤‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°
            </Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏•‡∏´‡∏∞">‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏•‡∏´‡∏∞</Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á">‡∏ä‡πà‡∏≤‡∏á ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á</Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå">‡∏ä‡πà‡∏≤‡∏á‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå</Option>
            <Option value="‡∏ä‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á">‡∏ä‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á</Option>
            <Option value="‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°">‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°</Option>
            <Option value="‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå ‡πÅ‡∏•‡∏∞‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏ä‡∏ô">
              ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå ‡πÅ‡∏•‡∏∞‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏ä‡∏ô
            </Option>
            <Option value="‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</Option>
            <Option value="‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®">‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®</Option>
            <Option value="‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î">‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î</Option>
            <Option value="‡πÄ‡∏°‡∏Ñ‡∏Ñ‡∏≤‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå ‡πÅ‡∏•‡∏∞‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå">
              ‡πÄ‡∏°‡∏Ñ‡∏Ñ‡∏≤‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå ‡πÅ‡∏•‡∏∞‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
            </Option>
            <Option value="‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•‡πÄ‡∏£‡∏∑‡∏≠">‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•‡πÄ‡∏£‡∏∑‡∏≠</Option>
          </Select>
        </Form.Item>

        <Form.Item name="classroom" label="‡∏´‡πâ‡∏≠‡∏á" rules={[{ required: true }]}>
          <Input autoComplete="off" />
        </Form.Item>

        <Form.Item
          name="rollNumber"
          label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
          rules={[{ required: true }]}
        >
          <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô 15" autoComplete="off" />
        </Form.Item>

        <Form.Item name="birthday" label="‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î" rules={[{ required: true }]}>
          <DatePicker style={{ width: "100%" }} autoComplete="off" />
        </Form.Item>

        <Form.Item
          name="phoneNumber"
          label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
          rules={[{ required: true }]}
        >
          <Input placeholder="089-xxxxxxx" autoComplete="off" />
        </Form.Item>

        <Form.Item
          name="role"
          label="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
          rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó" }]}
        >
          <Select>
            <Option value="student">‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Option>
            <Option value="teacher">‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</Option>
            <Option value="admin">‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</Option>
          </Select>
        </Form.Item>

        <Form.Item
          name="username"
          label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
          rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" }]}
        >
          <Input autoComplete="off" />
        </Form.Item>

        <Form.Item
          name="password"
          label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
          rules={[{ required: !editingUser, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" }]}
        >
          <Input.Password autoComplete="off" />
        </Form.Item>

        <Form.Item
          name="photo"
          label="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
          valuePropName="fileList"
          getValueFromEvent={normFile}
          
        >
          <Upload
            name="photo"
            listType="picture"
            beforeUpload={() => false}
            maxCount={1}
          >
            <Button icon={<UploadOutlined />}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</Button>
          </Upload>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default UserFormModal;
